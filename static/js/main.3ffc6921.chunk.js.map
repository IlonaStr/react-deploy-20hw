{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["timeConvertation","measure","Math","floor","substr","Timer","props","useState","time","timeSetter","autostart","isStart","startSetter","useEffect","Counting","setInterval","step","onTick","clearInterval","className","onClick","App","autoStart","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEA,SAASA,EAAiBC,GAMxB,OALaC,KAAKC,MAAMF,EAAU,KAKpB,KAHZ,KACCA,EAAU,IAAqC,GAA9BC,KAAKC,MAAMF,EAAU,OACvCG,QAAQ,GAIZ,IAsCeC,EAtCD,SAACC,GACb,MAA2BC,mBAASD,EAAME,MAA1C,mBAAOA,EAAP,KAAaC,EAAb,KACA,EAA+BF,mBAASD,EAAMI,WAA9C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WACvBJ,GAAWH,EAAO,GACpBC,EAAWD,EAAOF,EAAMU,MACxBV,EAAMW,OAAOjB,EAAiBQ,EAAOF,EAAMU,QAE3CP,EADSE,GAAoB,IAATH,GAEVG,GAAoB,IAATH,EADVA,EAEAF,EAAME,QAIlBF,EAAMU,MACT,OAAO,WACLE,cAAcJ,MAEf,CAACN,EAAMG,EAASL,IAMnB,OACE,sBAAKa,UAAU,cAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,8BAAMnB,EAAiBQ,OAEzB,8BACE,wBAAQY,QAVU,WACZR,GAAVD,IASI,SAAmCA,EAAU,OAAS,gBC/B/CU,MATf,WACE,OACE,sBAAKF,UAAU,MAAf,UACE,cAAC,EAAD,CAAOX,KAAM,IAAMQ,KAAM,IAAMM,WAAW,EAAML,OAAQ,SAACT,GAAD,OAAUe,QAAQC,IAAI,aAAehB,MAC7F,cAAC,EAAD,CAAOA,KAAM,OAASQ,KAAM,IAAMM,WAAW,EAAML,OAAQ,SAACT,GAAD,OAAUe,QAAQC,IAAI,aAAehB,UCKvFiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3ffc6921.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction timeConvertation(measure) {\r\n  const mins = Math.floor(measure / 60000);\r\n  const secs = (\r\n    \"0\" +\r\n    (measure / 1000 - Math.floor(measure / 60000) * 60)\r\n  ).substr(-2);\r\n  return mins + \":\" + secs;\r\n}\r\n\r\nconst Timer = (props) => {\r\n  const [time, timeSetter] = useState(props.time);\r\n  const [isStart, startSetter] = useState(props.autostart);\r\n\r\n  useEffect(() => {\r\n    const Counting = setInterval(() => {\r\n      if (isStart && time > 0) {\r\n        timeSetter(time - props.step);\r\n        props.onTick(timeConvertation(time - props.step));\r\n      } else if (isStart && time === 0) {\r\n        timeSetter(time);\r\n      } else if (!isStart && time === 0) {\r\n        timeSetter(props.time);\r\n      } else {\r\n        timeSetter(time);\r\n      }\r\n    }, props.step);\r\n    return () => {\r\n      clearInterval(Counting);\r\n    };\r\n  }, [time, isStart, props]);\r\n\r\n  const stopAndContinue = () => {\r\n    isStart ? startSetter(false) : startSetter(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timer-cover\">\r\n      <div className=\"timer-display\">\r\n        <div>{timeConvertation(time)}</div>\r\n      </div>\r\n      <div>\r\n        <button onClick={stopAndContinue}>{isStart ? \"Stop\" : \"Start\"}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import './App.css';\nimport Timer from './components/Timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time={5000} step={1000} autoStart={true} onTick={(time) => console.log('Time left ' + time)} />\n      <Timer time={5998000} step={2000} autoStart={true} onTick={(time) => console.log('Time left ' + time)} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}